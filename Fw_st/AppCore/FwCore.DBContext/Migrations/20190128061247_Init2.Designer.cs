// <auto-generated />
using System;
using FwCore.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FwCore.DBContext.Migrations
{
    [DbContext(typeof(AppDataDbContext))]
    [Migration("20190128061247_Init2")]
    partial class Init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FwCore.DBContext.Model.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatName")
                        .IsRequired();

                    b.Property<int?>("CategoryID1");

                    b.Property<int>("DisplayOrder");

                    b.Property<DateTime>("InsseredDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVisiable");

                    b.Property<int?>("ParentCatID");

                    b.HasKey("CategoryID");

                    b.HasIndex("CategoryID1");

                    b.ToTable("pCategory");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.CustFavoredList", b =>
                {
                    b.Property<int>("FavoredListID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductID");

                    b.Property<int>("UserId");

                    b.HasKey("FavoredListID");

                    b.HasIndex("ProductID");

                    b.ToTable("CustFavoredList");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.Invoice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderID");

                    b.Property<int>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<int?>("OrderID");

                    b.Property<int?>("PaymentTypeID");

                    b.Property<string>("TransID");

                    b.HasKey("PaymentID");

                    b.HasIndex("OrderID")
                        .IsUnique()
                        .HasFilter("[OrderID] IS NOT NULL");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PaymentID");

                    b.Property<string>("PaymentTypeName");

                    b.HasKey("PaymentTypeID");

                    b.HasIndex("PaymentID");

                    b.ToTable("paymentType");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarCode");

                    b.Property<int?>("BrandID");

                    b.Property<int?>("CategoryID");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Feature");

                    b.Property<DateTime>("InsertdDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVisiable");

                    b.Property<DateTime>("ManufactureDate");

                    b.Property<string>("ProductName")
                        .IsRequired();

                    b.Property<string>("QRCode");

                    b.Property<string>("ReturnPolicy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserId");

                    b.Property<string>("WarrentyPolicy");

                    b.HasKey("ProductID");

                    b.HasIndex("BrandID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.ProductExtraInfo", b =>
                {
                    b.Property<int>("PInfoID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AirCapacity");

                    b.Property<string>("BCamera");

                    b.Property<string>("Battery");

                    b.Property<string>("CPUSpeed");

                    b.Property<string>("Display");

                    b.Property<string>("FCamera");

                    b.Property<string>("GraphicCard");

                    b.Property<string>("HeadPhonFeature");

                    b.Property<string>("NumberOFSIM");

                    b.Property<string>("OperatingSystem");

                    b.Property<string>("Other");

                    b.Property<string>("PenConnectorType");

                    b.Property<string>("PortableSpeakerFeature");

                    b.Property<string>("PowerBankCapacity");

                    b.Property<string>("PrintSpeed");

                    b.Property<string>("ProcessorType");

                    b.Property<int?>("ProductID");

                    b.Property<string>("RAM");

                    b.Property<string>("ROM");

                    b.Property<string>("StoreCapacity");

                    b.Property<string>("TvResulation");

                    b.HasKey("PInfoID");

                    b.HasIndex("ProductID")
                        .IsUnique()
                        .HasFilter("[ProductID] IS NOT NULL");

                    b.ToTable("ProductExtraInfo");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.oShipingAddress", b =>
                {
                    b.Property<int>("OSAID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<int>("OrderID");

                    b.Property<string>("PostalCode");

                    b.Property<string>("State");

                    b.HasKey("OSAID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("oShipingAddress");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.pBrand", b =>
                {
                    b.Property<int>("BrandID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .IsRequired();

                    b.Property<int?>("CategoryID");

                    b.HasKey("BrandID");

                    b.HasIndex("CategoryID");

                    b.ToTable("pBrand");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.pColor", b =>
                {
                    b.Property<int>("ColorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorName");

                    b.HasKey("ColorID");

                    b.ToTable("pColor");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.pImage", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption");

                    b.Property<string>("FilePathOrLink");

                    b.Property<bool>("IsDefault");

                    b.Property<int?>("ProductID");

                    b.Property<string>("ShortDetails");

                    b.Property<string>("ThumbnailPathOrLink");

                    b.HasKey("ImageID");

                    b.HasIndex("ProductID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.pOrder", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DelevaryDate");

                    b.Property<bool>("IsDelevered");

                    b.Property<bool>("IsPaid");

                    b.Property<DateTime>("OrderPlaceDate");

                    b.Property<string>("UserId");

                    b.HasKey("OrderID");

                    b.ToTable("pOrder");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.pOrderDetails", b =>
                {
                    b.Property<int>("OrderDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrderID");

                    b.Property<int?>("ProductID");

                    b.Property<int>("UnitQuantity");

                    b.Property<double>("perUnitSellingPrice");

                    b.HasKey("OrderDetailsID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID")
                        .IsUnique()
                        .HasFilter("[ProductID] IS NOT NULL");

                    b.ToTable("pOrderDetails");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.pProductColor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColorID");

                    b.Property<int>("ProductID");

                    b.HasKey("ID");

                    b.HasIndex("ColorID");

                    b.HasIndex("ProductID");

                    b.ToTable("pProductColor");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.pReview", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AveRating");

                    b.Property<int>("ProductID");

                    b.Property<double>("Rating");

                    b.Property<string>("UserId");

                    b.HasKey("ReviewID");

                    b.HasIndex("ProductID");

                    b.ToTable("pReview");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.pStock", b =>
                {
                    b.Property<int>("StockID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertdDate");

                    b.Property<int?>("ProductID");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserId");

                    b.Property<int>("mlQuantity");

                    b.Property<int>("tQuantity");

                    b.Property<int>("tpQuantity");

                    b.HasKey("StockID");

                    b.HasIndex("ProductID")
                        .IsUnique()
                        .HasFilter("[ProductID] IS NOT NULL");

                    b.ToTable("pStock");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.pUnitPrice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertdDate");

                    b.Property<decimal>("MarketPrice");

                    b.Property<int>("ProductID");

                    b.Property<decimal>("SellingPrice");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("ProductID")
                        .IsUnique();

                    b.ToTable("pUnitPrice");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.Category", b =>
                {
                    b.HasOne("FwCore.DBContext.Model.Category")
                        .WithMany("categories")
                        .HasForeignKey("CategoryID1");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.CustFavoredList", b =>
                {
                    b.HasOne("FwCore.DBContext.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FwCore.DBContext.Model.Invoice", b =>
                {
                    b.HasOne("FwCore.DBContext.Model.pOrder", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FwCore.DBContext.Model.Payment", b =>
                {
                    b.HasOne("FwCore.DBContext.Model.pOrder", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("FwCore.DBContext.Model.Payment", "OrderID");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.PaymentType", b =>
                {
                    b.HasOne("FwCore.DBContext.Model.Payment", "Payment")
                        .WithMany("PaymentType")
                        .HasForeignKey("PaymentID");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.Product", b =>
                {
                    b.HasOne("FwCore.DBContext.Model.pBrand", "Brand")
                        .WithMany("Product")
                        .HasForeignKey("BrandID");

                    b.HasOne("FwCore.DBContext.Model.Category", "Categories")
                        .WithMany("Product")
                        .HasForeignKey("CategoryID");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.ProductExtraInfo", b =>
                {
                    b.HasOne("FwCore.DBContext.Model.Product", "Product")
                        .WithOne("ProductExtraInfo")
                        .HasForeignKey("FwCore.DBContext.Model.ProductExtraInfo", "ProductID");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.oShipingAddress", b =>
                {
                    b.HasOne("FwCore.DBContext.Model.pOrder", "Order")
                        .WithOne("ShipingAddress")
                        .HasForeignKey("FwCore.DBContext.Model.oShipingAddress", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FwCore.DBContext.Model.pBrand", b =>
                {
                    b.HasOne("FwCore.DBContext.Model.Category", "categories")
                        .WithMany()
                        .HasForeignKey("CategoryID");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.pImage", b =>
                {
                    b.HasOne("FwCore.DBContext.Model.Product", "Product")
                        .WithMany("Image")
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.pOrderDetails", b =>
                {
                    b.HasOne("FwCore.DBContext.Model.pOrder", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID");

                    b.HasOne("FwCore.DBContext.Model.Product", "Product")
                        .WithOne("OrderDetail")
                        .HasForeignKey("FwCore.DBContext.Model.pOrderDetails", "ProductID");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.pProductColor", b =>
                {
                    b.HasOne("FwCore.DBContext.Model.pColor", "Color")
                        .WithMany("ProductColor")
                        .HasForeignKey("ColorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FwCore.DBContext.Model.Product", "products")
                        .WithMany("ProductColor")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FwCore.DBContext.Model.pReview", b =>
                {
                    b.HasOne("FwCore.DBContext.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FwCore.DBContext.Model.pStock", b =>
                {
                    b.HasOne("FwCore.DBContext.Model.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("FwCore.DBContext.Model.pStock", "ProductID");
                });

            modelBuilder.Entity("FwCore.DBContext.Model.pUnitPrice", b =>
                {
                    b.HasOne("FwCore.DBContext.Model.Product", "Product")
                        .WithOne("UnitPrice")
                        .HasForeignKey("FwCore.DBContext.Model.pUnitPrice", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
